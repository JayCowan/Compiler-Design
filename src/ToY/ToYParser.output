Nonterminals useless in grammar

    input
    line
    printf
    dec


Terminals unused in grammar

    BOOL
    ID
    '\n'
    "printf"
    ';'
    "bool"


Rules useless in grammar

   17 input: line
   18      | input line

   19 line: '\n'
   20     | printf '\n'
   21     | exp '\n'
   22     | error '\n'

   23 printf: STRING
   24       | "printf" printf ';'

   25 dec: ε
   26    | "bool" dec '=' exp ';'


Grammar

    0 $accept: program $end

    1 program: ε
    2        | struct program

    3 exp: NUM
    4    | '!'
    5    | '-' error
    6    | '-' exp
    7    | exp '+' exp
    8    | exp '-' exp
    9    | exp '^' exp
   10    | exp '*' exp
   11    | exp '/' exp
   12    | exp '=' exp
   13    | '(' exp ')'

   14 $@1: ε

   15 exp: '(' error ')' $@1 STRING

   16 struct: "struct" exp


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10)
    '!' (33) 4
    '(' (40) 13 15
    ')' (41) 13 15
    '*' (42) 10
    '+' (43) 7
    '-' (45) 5 6 8
    '/' (47) 11
    ';' (59)
    '=' (61) 12
    '^' (94) 9
    error (256) 5 15
    NUM (258) 3
    STRING (259) 15
    BOOL (260)
    ID (261)
    NEG (262)
    "printf" (263)
    "bool" (264)
    "struct" (265) 16


Nonterminals, with rules where they appear

    $accept (22)
        on left: 0
    program (23)
        on left: 1 2
        on right: 0 2
    exp (24)
        on left: 3 4 5 6 7 8 9 10 11 12 13 15
        on right: 6 7 8 9 10 11 12 13 16
    $@1 (25)
        on left: 14
        on right: 15
    struct (26)
        on left: 16
        on right: 2


State 0

    0 $accept: • program $end
    1 program: ε •  [$end]
    2        | • struct program
   16 struct: • "struct" exp

    "struct"  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program  go to state 2
    struct   go to state 3


State 1

    3 exp: • NUM
    4    | • '!'
    5    | • '-' error
    6    | • '-' exp
    7    | • exp '+' exp
    8    | • exp '-' exp
    9    | • exp '^' exp
   10    | • exp '*' exp
   11    | • exp '/' exp
   12    | • exp '=' exp
   13    | • '(' exp ')'
   15    | • '(' error ')' $@1 STRING
   16 struct: "struct" • exp

    NUM  shift, and go to state 4
    '-'  shift, and go to state 5
    '!'  shift, and go to state 6
    '('  shift, and go to state 7

    exp  go to state 8


State 2

    0 $accept: program • $end

    $end  shift, and go to state 9


State 3

    1 program: ε •  [$end]
    2        | • struct program
    2        | struct • program
   16 struct: • "struct" exp

    "struct"  shift, and go to state 1

    $default  reduce using rule 1 (program)

    program  go to state 10
    struct   go to state 3


State 4

    3 exp: NUM •

    $default  reduce using rule 3 (exp)


State 5

    3 exp: • NUM
    4    | • '!'
    5    | • '-' error
    5    | '-' • error
    6    | • '-' exp
    6    | '-' • exp
    7    | • exp '+' exp
    8    | • exp '-' exp
    9    | • exp '^' exp
   10    | • exp '*' exp
   11    | • exp '/' exp
   12    | • exp '=' exp
   13    | • '(' exp ')'
   15    | • '(' error ')' $@1 STRING

    error  shift, and go to state 11
    NUM    shift, and go to state 4
    '-'    shift, and go to state 5
    '!'    shift, and go to state 6
    '('    shift, and go to state 7

    exp  go to state 12


State 6

    4 exp: '!' •

    $default  reduce using rule 4 (exp)


State 7

    3 exp: • NUM
    4    | • '!'
    5    | • '-' error
    6    | • '-' exp
    7    | • exp '+' exp
    8    | • exp '-' exp
    9    | • exp '^' exp
   10    | • exp '*' exp
   11    | • exp '/' exp
   12    | • exp '=' exp
   13    | • '(' exp ')'
   13    | '(' • exp ')'
   15    | • '(' error ')' $@1 STRING
   15    | '(' • error ')' $@1 STRING

    error  shift, and go to state 13
    NUM    shift, and go to state 4
    '-'    shift, and go to state 5
    '!'    shift, and go to state 6
    '('    shift, and go to state 7

    exp  go to state 14


State 8

    7 exp: exp • '+' exp
    8    | exp • '-' exp
    9    | exp • '^' exp
   10    | exp • '*' exp
   11    | exp • '/' exp
   12    | exp • '=' exp
   16 struct: "struct" exp •  [$end, "struct"]

    '-'  shift, and go to state 15
    '+'  shift, and go to state 16
    '*'  shift, and go to state 17
    '/'  shift, and go to state 18
    '^'  shift, and go to state 19
    '='  shift, and go to state 20

    $default  reduce using rule 16 (struct)


State 9

    0 $accept: program $end •

    $default  accept


State 10

    2 program: struct program •

    $default  reduce using rule 2 (program)


State 11

    5 exp: '-' error •

    $default  reduce using rule 5 (exp)


State 12

    6 exp: '-' exp •  [$end, ')', "struct"]
    7    | exp • '+' exp
    8    | exp • '-' exp
    9    | exp • '^' exp
   10    | exp • '*' exp
   11    | exp • '/' exp
   12    | exp • '=' exp

    '-'  shift, and go to state 15
    '+'  shift, and go to state 16
    '*'  shift, and go to state 17
    '/'  shift, and go to state 18
    '^'  shift, and go to state 19
    '='  shift, and go to state 20

    $default  reduce using rule 6 (exp)

    Conflict between rule 6 and token '-' resolved as shift (NEG < '-').
    Conflict between rule 6 and token '+' resolved as shift (NEG < '+').
    Conflict between rule 6 and token '*' resolved as shift (NEG < '*').
    Conflict between rule 6 and token '/' resolved as shift (NEG < '/').
    Conflict between rule 6 and token '^' resolved as shift (NEG < '^').
    Conflict between rule 6 and token '=' resolved as shift (NEG < '=').


State 13

   15 exp: '(' error • ')' $@1 STRING

    ')'  shift, and go to state 21


State 14

    7 exp: exp • '+' exp
    8    | exp • '-' exp
    9    | exp • '^' exp
   10    | exp • '*' exp
   11    | exp • '/' exp
   12    | exp • '=' exp
   13    | '(' exp • ')'

    '-'  shift, and go to state 15
    '+'  shift, and go to state 16
    '*'  shift, and go to state 17
    '/'  shift, and go to state 18
    '^'  shift, and go to state 19
    '='  shift, and go to state 20
    ')'  shift, and go to state 22


State 15

    3 exp: • NUM
    4    | • '!'
    5    | • '-' error
    6    | • '-' exp
    7    | • exp '+' exp
    8    | • exp '-' exp
    8    | exp '-' • exp
    9    | • exp '^' exp
   10    | • exp '*' exp
   11    | • exp '/' exp
   12    | • exp '=' exp
   13    | • '(' exp ')'
   15    | • '(' error ')' $@1 STRING

    NUM  shift, and go to state 4
    '-'  shift, and go to state 5
    '!'  shift, and go to state 6
    '('  shift, and go to state 7

    exp  go to state 23


State 16

    3 exp: • NUM
    4    | • '!'
    5    | • '-' error
    6    | • '-' exp
    7    | • exp '+' exp
    7    | exp '+' • exp
    8    | • exp '-' exp
    9    | • exp '^' exp
   10    | • exp '*' exp
   11    | • exp '/' exp
   12    | • exp '=' exp
   13    | • '(' exp ')'
   15    | • '(' error ')' $@1 STRING

    NUM  shift, and go to state 4
    '-'  shift, and go to state 5
    '!'  shift, and go to state 6
    '('  shift, and go to state 7

    exp  go to state 24


State 17

    3 exp: • NUM
    4    | • '!'
    5    | • '-' error
    6    | • '-' exp
    7    | • exp '+' exp
    8    | • exp '-' exp
    9    | • exp '^' exp
   10    | • exp '*' exp
   10    | exp '*' • exp
   11    | • exp '/' exp
   12    | • exp '=' exp
   13    | • '(' exp ')'
   15    | • '(' error ')' $@1 STRING

    NUM  shift, and go to state 4
    '-'  shift, and go to state 5
    '!'  shift, and go to state 6
    '('  shift, and go to state 7

    exp  go to state 25


State 18

    3 exp: • NUM
    4    | • '!'
    5    | • '-' error
    6    | • '-' exp
    7    | • exp '+' exp
    8    | • exp '-' exp
    9    | • exp '^' exp
   10    | • exp '*' exp
   11    | • exp '/' exp
   11    | exp '/' • exp
   12    | • exp '=' exp
   13    | • '(' exp ')'
   15    | • '(' error ')' $@1 STRING

    NUM  shift, and go to state 4
    '-'  shift, and go to state 5
    '!'  shift, and go to state 6
    '('  shift, and go to state 7

    exp  go to state 26


State 19

    3 exp: • NUM
    4    | • '!'
    5    | • '-' error
    6    | • '-' exp
    7    | • exp '+' exp
    8    | • exp '-' exp
    9    | • exp '^' exp
    9    | exp '^' • exp
   10    | • exp '*' exp
   11    | • exp '/' exp
   12    | • exp '=' exp
   13    | • '(' exp ')'
   15    | • '(' error ')' $@1 STRING

    NUM  shift, and go to state 4
    '-'  shift, and go to state 5
    '!'  shift, and go to state 6
    '('  shift, and go to state 7

    exp  go to state 27


State 20

    3 exp: • NUM
    4    | • '!'
    5    | • '-' error
    6    | • '-' exp
    7    | • exp '+' exp
    8    | • exp '-' exp
    9    | • exp '^' exp
   10    | • exp '*' exp
   11    | • exp '/' exp
   12    | • exp '=' exp
   12    | exp '=' • exp
   13    | • '(' exp ')'
   15    | • '(' error ')' $@1 STRING

    NUM  shift, and go to state 4
    '-'  shift, and go to state 5
    '!'  shift, and go to state 6
    '('  shift, and go to state 7

    exp  go to state 28


State 21

   14 $@1: ε •
   15 exp: '(' error ')' • $@1 STRING

    $default  reduce using rule 14 ($@1)

    $@1  go to state 29


State 22

   13 exp: '(' exp ')' •

    $default  reduce using rule 13 (exp)


State 23

    7 exp: exp • '+' exp
    8    | exp • '-' exp
    8    | exp '-' exp •  [$end, '-', '+', ')', "struct"]
    9    | exp • '^' exp
   10    | exp • '*' exp
   11    | exp • '/' exp
   12    | exp • '=' exp

    '*'  shift, and go to state 17
    '/'  shift, and go to state 18
    '^'  shift, and go to state 19
    '='  shift, and go to state 20

    $default  reduce using rule 8 (exp)

    Conflict between rule 8 and token '-' resolved as reduce (%left '-').
    Conflict between rule 8 and token '+' resolved as reduce (%left '+').
    Conflict between rule 8 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 8 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 8 and token '^' resolved as shift ('-' < '^').
    Conflict between rule 8 and token '=' resolved as shift ('-' < '=').


State 24

    7 exp: exp • '+' exp
    7    | exp '+' exp •  [$end, '-', '+', ')', "struct"]
    8    | exp • '-' exp
    9    | exp • '^' exp
   10    | exp • '*' exp
   11    | exp • '/' exp
   12    | exp • '=' exp

    '*'  shift, and go to state 17
    '/'  shift, and go to state 18
    '^'  shift, and go to state 19
    '='  shift, and go to state 20

    $default  reduce using rule 7 (exp)

    Conflict between rule 7 and token '-' resolved as reduce (%left '-').
    Conflict between rule 7 and token '+' resolved as reduce (%left '+').
    Conflict between rule 7 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 7 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 7 and token '^' resolved as shift ('+' < '^').
    Conflict between rule 7 and token '=' resolved as shift ('+' < '=').


State 25

    7 exp: exp • '+' exp
    8    | exp • '-' exp
    9    | exp • '^' exp
   10    | exp • '*' exp
   10    | exp '*' exp •  [$end, '-', '+', '*', '/', ')', "struct"]
   11    | exp • '/' exp
   12    | exp • '=' exp

    '^'  shift, and go to state 19
    '='  shift, and go to state 20

    $default  reduce using rule 10 (exp)

    Conflict between rule 10 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 10 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 10 and token '*' resolved as reduce (%left '*').
    Conflict between rule 10 and token '/' resolved as reduce (%left '/').
    Conflict between rule 10 and token '^' resolved as shift ('*' < '^').
    Conflict between rule 10 and token '=' resolved as shift ('*' < '=').


State 26

    7 exp: exp • '+' exp
    8    | exp • '-' exp
    9    | exp • '^' exp
   10    | exp • '*' exp
   11    | exp • '/' exp
   11    | exp '/' exp •  [$end, '-', '+', '*', '/', ')', "struct"]
   12    | exp • '=' exp

    '^'  shift, and go to state 19
    '='  shift, and go to state 20

    $default  reduce using rule 11 (exp)

    Conflict between rule 11 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 11 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 11 and token '*' resolved as reduce (%left '*').
    Conflict between rule 11 and token '/' resolved as reduce (%left '/').
    Conflict between rule 11 and token '^' resolved as shift ('/' < '^').
    Conflict between rule 11 and token '=' resolved as shift ('/' < '=').


State 27

    7 exp: exp • '+' exp
    8    | exp • '-' exp
    9    | exp • '^' exp
    9    | exp '^' exp •  [$end, '-', '+', '*', '/', ')', "struct"]
   10    | exp • '*' exp
   11    | exp • '/' exp
   12    | exp • '=' exp

    '^'  shift, and go to state 19
    '='  shift, and go to state 20

    $default  reduce using rule 9 (exp)

    Conflict between rule 9 and token '-' resolved as reduce ('-' < '^').
    Conflict between rule 9 and token '+' resolved as reduce ('+' < '^').
    Conflict between rule 9 and token '*' resolved as reduce ('*' < '^').
    Conflict between rule 9 and token '/' resolved as reduce ('/' < '^').
    Conflict between rule 9 and token '^' resolved as shift (%right '^').
    Conflict between rule 9 and token '=' resolved as shift ('^' < '=').


State 28

    7 exp: exp • '+' exp
    8    | exp • '-' exp
    9    | exp • '^' exp
   10    | exp • '*' exp
   11    | exp • '/' exp
   12    | exp • '=' exp
   12    | exp '=' exp •  [$end, ')', "struct"]

    '-'  shift, and go to state 15
    '+'  shift, and go to state 16
    '*'  shift, and go to state 17
    '/'  shift, and go to state 18
    '^'  shift, and go to state 19
    '='  shift, and go to state 20

    $default  reduce using rule 12 (exp)

    Conflict between rule 12 and token '-' resolved as shift (NEG < '-').
    Conflict between rule 12 and token '+' resolved as shift (NEG < '+').
    Conflict between rule 12 and token '*' resolved as shift (NEG < '*').
    Conflict between rule 12 and token '/' resolved as shift (NEG < '/').
    Conflict between rule 12 and token '^' resolved as shift (NEG < '^').
    Conflict between rule 12 and token '=' resolved as shift (NEG < '=').


State 29

   15 exp: '(' error ')' $@1 • STRING

    STRING  shift, and go to state 30


State 30

   15 exp: '(' error ')' $@1 STRING •

    $default  reduce using rule 15 (exp)
